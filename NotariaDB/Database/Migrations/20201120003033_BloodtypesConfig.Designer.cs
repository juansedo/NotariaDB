// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NotariaDB.Models;

namespace NotariaDB.Database.Migrations
{
    [DbContext(typeof(notariadbContext))]
    [Migration("20201120003033_BloodtypesConfig")]
    partial class BloodtypesConfig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("NotariaDB.Models.Bloodtypes", b =>
                {
                    b.Property<int>("BloodtypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("bloodtype_id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5);

                    b.HasKey("BloodtypeId")
                        .HasName("PRIMARY");

                    b.ToTable("bloodtypes");

                    b.HasData(
                        new
                        {
                            BloodtypeId = 1,
                            Name = "A+"
                        },
                        new
                        {
                            BloodtypeId = 2,
                            Name = "A-"
                        },
                        new
                        {
                            BloodtypeId = 3,
                            Name = "B+"
                        },
                        new
                        {
                            BloodtypeId = 4,
                            Name = "B-"
                        },
                        new
                        {
                            BloodtypeId = 5,
                            Name = "O+"
                        },
                        new
                        {
                            BloodtypeId = 6,
                            Name = "O-"
                        },
                        new
                        {
                            BloodtypeId = 7,
                            Name = "AB+"
                        },
                        new
                        {
                            BloodtypeId = 8,
                            Name = "AB-"
                        });
                });

            modelBuilder.Entity("NotariaDB.Models.Cities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.HasKey("Id");

                    b.ToTable("cities");
                });

            modelBuilder.Entity("NotariaDB.Models.Defunciones", b =>
                {
                    b.Property<string>("Serial")
                        .HasColumnName("serial")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("AttachDescription")
                        .IsRequired()
                        .HasColumnName("attach_description")
                        .HasColumnType("varchar(75)")
                        .HasMaxLength(75);

                    b.Property<DateTime>("DeadDate")
                        .HasColumnName("dead_date")
                        .HasColumnType("date");

                    b.Property<string>("Fileroute")
                        .HasColumnName("fileroute")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("MedicId")
                        .IsRequired()
                        .HasColumnName("medic_id")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NotaryId")
                        .IsRequired()
                        .HasColumnName("notary_id")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15);

                    b.Property<int>("PlaceId")
                        .HasColumnName("place_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .HasColumnName("reg_date")
                        .HasColumnType("date");

                    b.Property<string>("RelateduserId")
                        .HasColumnName("relateduser_id")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnName("surname")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("WitnessId")
                        .IsRequired()
                        .HasColumnName("witness_id")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Serial")
                        .HasName("PRIMARY");

                    b.HasIndex("MedicId")
                        .HasName("fk_defunciones_medic_id_idx");

                    b.HasIndex("NotaryId")
                        .HasName("fk_defunciones_notary_id_idx");

                    b.HasIndex("PlaceId")
                        .HasName("fk_nacimientos_places_id_idx");

                    b.HasIndex("RelateduserId")
                        .HasName("fk_nacimientos_relateduser_id_idx");

                    b.HasIndex("WitnessId")
                        .HasName("fk_nacimientos_witness1_id_idx");

                    b.ToTable("defunciones");
                });

            modelBuilder.Entity("NotariaDB.Models.Departments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("NotariaDB.Models.Doctypes", b =>
                {
                    b.Property<int>("DoctypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("doctype_id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("DoctypeId")
                        .HasName("PRIMARY");

                    b.ToTable("doctypes");
                });

            modelBuilder.Entity("NotariaDB.Models.MatAttaches", b =>
                {
                    b.Property<int>("AttachId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("attach_id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("AttachId")
                        .HasName("PRIMARY");

                    b.ToTable("mat_attaches");
                });

            modelBuilder.Entity("NotariaDB.Models.Matrimonios", b =>
                {
                    b.Property<string>("Serial")
                        .HasColumnName("serial")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("AttachDescription")
                        .IsRequired()
                        .HasColumnName("attach_description")
                        .HasColumnType("varchar(75)")
                        .HasMaxLength(75);

                    b.Property<int>("AttachId")
                        .HasColumnName("attach_id")
                        .HasColumnType("int");

                    b.Property<string>("Fileroute")
                        .HasColumnName("fileroute")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Name1")
                        .IsRequired()
                        .HasColumnName("name1")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name2")
                        .IsRequired()
                        .HasColumnName("name2")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.Property<string>("NotaryId")
                        .IsRequired()
                        .HasColumnName("notary_id")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15);

                    b.Property<int>("PlaceId")
                        .HasColumnName("place_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .HasColumnName("reg_date")
                        .HasColumnType("date");

                    b.Property<string>("Relateduser1Id")
                        .HasColumnName("relateduser1_id")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Relateduser2Id")
                        .HasColumnName("relateduser2_id")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.Property<string>("Surname1")
                        .IsRequired()
                        .HasColumnName("surname1")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Surname2")
                        .IsRequired()
                        .HasColumnName("surname2")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("WeedingDate")
                        .HasColumnName("weeding_date")
                        .HasColumnType("date");

                    b.Property<string>("WitnessId")
                        .IsRequired()
                        .HasColumnName("witness_id")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Serial")
                        .HasName("PRIMARY");

                    b.HasIndex("AttachId")
                        .HasName("fk_matrimonios_attach_id_idx");

                    b.HasIndex("NotaryId")
                        .HasName("fk_matrimonios_notary_id_idx");

                    b.HasIndex("PlaceId")
                        .HasName("fk_nacimientos_places_id_idx");

                    b.HasIndex("Relateduser1Id")
                        .HasName("fk_nacimientos_relateduser_id_idx");

                    b.HasIndex("Relateduser2Id")
                        .HasName("fk_matrimonios_relateduser2_id_idx");

                    b.HasIndex("WitnessId")
                        .HasName("fk_nacimientos_witness1_id_idx");

                    b.ToTable("matrimonios");
                });

            modelBuilder.Entity("NotariaDB.Models.Medicos", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("MedicCard")
                        .IsRequired()
                        .HasColumnName("medic_card")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnName("surname")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("medicos");
                });

            modelBuilder.Entity("NotariaDB.Models.NacAttaches", b =>
                {
                    b.Property<int>("AttachId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("attach_id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("AttachId")
                        .HasName("PRIMARY");

                    b.ToTable("nac_attaches");
                });

            modelBuilder.Entity("NotariaDB.Models.Nacimientos", b =>
                {
                    b.Property<string>("Nuip")
                        .HasColumnName("nuip")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("AttachDescription")
                        .IsRequired()
                        .HasColumnName("attach_description")
                        .HasColumnType("varchar(75)")
                        .HasMaxLength(75);

                    b.Property<int>("AttachId")
                        .HasColumnName("attach_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnName("birth_date")
                        .HasColumnType("date");

                    b.Property<TimeSpan?>("BirthHour")
                        .HasColumnName("birth_hour")
                        .HasColumnType("time");

                    b.Property<int>("BloodtypeId")
                        .HasColumnName("bloodtype_id")
                        .HasColumnType("int");

                    b.Property<string>("DadId")
                        .IsRequired()
                        .HasColumnName("dad_id")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Fileroute")
                        .HasColumnName("fileroute")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("MomId")
                        .IsRequired()
                        .HasColumnName("mom_id")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NotaryId")
                        .IsRequired()
                        .HasColumnName("notary_id")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15);

                    b.Property<int>("PlaceId")
                        .HasColumnName("place_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDate")
                        .HasColumnName("reg_date")
                        .HasColumnType("date");

                    b.Property<string>("RelateduserId")
                        .HasColumnName("relateduser_id")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Serial")
                        .IsRequired()
                        .HasColumnName("serial")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnName("sex")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1);

                    b.Property<string>("Surname1")
                        .IsRequired()
                        .HasColumnName("surname1")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Surname2")
                        .IsRequired()
                        .HasColumnName("surname2")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("WitnessId")
                        .IsRequired()
                        .HasColumnName("witness_id")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Nuip")
                        .HasName("PRIMARY");

                    b.HasIndex("AttachId")
                        .HasName("fk_nacimientos_attach_id_idx");

                    b.HasIndex("BloodtypeId")
                        .HasName("fk_nacimientos_bloodtype_id_idx");

                    b.HasIndex("DadId")
                        .HasName("fk_nacimientos_dad_id_idx");

                    b.HasIndex("MomId")
                        .HasName("fk_nacimientos_mom_id_idx");

                    b.HasIndex("NotaryId")
                        .HasName("fk_nacimientos_notary_id_idx");

                    b.HasIndex("PlaceId")
                        .HasName("fk_nacimientos_places_id_idx");

                    b.HasIndex("RelateduserId")
                        .HasName("fk_nacimientos_relateduser_id_idx");

                    b.HasIndex("WitnessId")
                        .HasName("fk_nacimientos_witness1_id_idx");

                    b.ToTable("nacimientos");
                });

            modelBuilder.Entity("NotariaDB.Models.Notarios", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.ToTable("notarios");
                });

            modelBuilder.Entity("NotariaDB.Models.Places", b =>
                {
                    b.Property<int>("PlaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("place_id")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnName("city_id")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnName("department_id")
                        .HasColumnType("int");

                    b.HasKey("PlaceId")
                        .HasName("PRIMARY");

                    b.HasIndex("CityId")
                        .HasName("fk_places_city_id_idx");

                    b.HasIndex("DepartmentId")
                        .HasName("fk_places_department_id_idx");

                    b.ToTable("places");
                });

            modelBuilder.Entity("NotariaDB.Models.Usuarios", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnName("birth_date")
                        .HasColumnType("date");

                    b.Property<int>("DoctypeId")
                        .HasColumnName("doctype_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpeditionDate")
                        .HasColumnName("expedition_date")
                        .HasColumnType("date");

                    b.Property<string>("ExpeditionPlace")
                        .HasColumnName("expedition_place")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnName("surname")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("DoctypeId")
                        .HasName("fk_doctypes_usuarios_idx");

                    b.ToTable("usuarios");
                });

            modelBuilder.Entity("NotariaDB.Models.Defunciones", b =>
                {
                    b.HasOne("NotariaDB.Models.Medicos", "Medic")
                        .WithMany("Defunciones")
                        .HasForeignKey("MedicId")
                        .HasConstraintName("fk_defunciones_medic_id")
                        .IsRequired();

                    b.HasOne("NotariaDB.Models.Notarios", "Notary")
                        .WithMany("Defunciones")
                        .HasForeignKey("NotaryId")
                        .HasConstraintName("fk_defunciones_notary_id")
                        .IsRequired();

                    b.HasOne("NotariaDB.Models.Places", "Place")
                        .WithMany("Defunciones")
                        .HasForeignKey("PlaceId")
                        .HasConstraintName("fk_defunciones_places_id")
                        .IsRequired();

                    b.HasOne("NotariaDB.Models.Usuarios", "Relateduser")
                        .WithMany("DefuncionesRelateduser")
                        .HasForeignKey("RelateduserId")
                        .HasConstraintName("fk_defunciones_relateduser1_id");

                    b.HasOne("NotariaDB.Models.Usuarios", "Witness")
                        .WithMany("DefuncionesWitness")
                        .HasForeignKey("WitnessId")
                        .HasConstraintName("fk_defunciones_witness1_id")
                        .IsRequired();
                });

            modelBuilder.Entity("NotariaDB.Models.Matrimonios", b =>
                {
                    b.HasOne("NotariaDB.Models.MatAttaches", "Attach")
                        .WithMany("Matrimonios")
                        .HasForeignKey("AttachId")
                        .HasConstraintName("fk_matrimonios_attach_id")
                        .IsRequired();

                    b.HasOne("NotariaDB.Models.Notarios", "Notary")
                        .WithMany("Matrimonios")
                        .HasForeignKey("NotaryId")
                        .HasConstraintName("fk_matrimonios_notary_id")
                        .IsRequired();

                    b.HasOne("NotariaDB.Models.Places", "Place")
                        .WithMany("Matrimonios")
                        .HasForeignKey("PlaceId")
                        .HasConstraintName("fk_matrimonios_places_id")
                        .IsRequired();

                    b.HasOne("NotariaDB.Models.Usuarios", "Relateduser1")
                        .WithMany("MatrimoniosRelateduser1")
                        .HasForeignKey("Relateduser1Id")
                        .HasConstraintName("fk_matrimonios_relateduser1_id");

                    b.HasOne("NotariaDB.Models.Usuarios", "Relateduser2")
                        .WithMany("MatrimoniosRelateduser2")
                        .HasForeignKey("Relateduser2Id")
                        .HasConstraintName("fk_matrimonios_relateduser2_id");

                    b.HasOne("NotariaDB.Models.Usuarios", "Witness")
                        .WithMany("MatrimoniosWitness")
                        .HasForeignKey("WitnessId")
                        .HasConstraintName("fk_matrimonios_witness1_id")
                        .IsRequired();
                });

            modelBuilder.Entity("NotariaDB.Models.Nacimientos", b =>
                {
                    b.HasOne("NotariaDB.Models.NacAttaches", "Attach")
                        .WithMany("Nacimientos")
                        .HasForeignKey("AttachId")
                        .HasConstraintName("fk_nacimientos_attach_id")
                        .IsRequired();

                    b.HasOne("NotariaDB.Models.Bloodtypes", "Bloodtype")
                        .WithMany("Nacimientos")
                        .HasForeignKey("BloodtypeId")
                        .HasConstraintName("fk_nacimientos_bloodtype_id")
                        .IsRequired();

                    b.HasOne("NotariaDB.Models.Usuarios", "Dad")
                        .WithMany("NacimientosDad")
                        .HasForeignKey("DadId")
                        .HasConstraintName("fk_nacimientos_dad_id")
                        .IsRequired();

                    b.HasOne("NotariaDB.Models.Usuarios", "Mom")
                        .WithMany("NacimientosMom")
                        .HasForeignKey("MomId")
                        .HasConstraintName("fk_nacimientos_mom_id")
                        .IsRequired();

                    b.HasOne("NotariaDB.Models.Notarios", "Notary")
                        .WithMany("Nacimientos")
                        .HasForeignKey("NotaryId")
                        .HasConstraintName("fk_nacimientos_notary_id")
                        .IsRequired();

                    b.HasOne("NotariaDB.Models.Places", "Place")
                        .WithMany("Nacimientos")
                        .HasForeignKey("PlaceId")
                        .HasConstraintName("fk_nacimientos_places_id")
                        .IsRequired();

                    b.HasOne("NotariaDB.Models.Usuarios", "Relateduser")
                        .WithMany("NacimientosRelateduser")
                        .HasForeignKey("RelateduserId")
                        .HasConstraintName("fk_nacimientos_relateduser_id");

                    b.HasOne("NotariaDB.Models.Usuarios", "Witness")
                        .WithMany("NacimientosWitness")
                        .HasForeignKey("WitnessId")
                        .HasConstraintName("fk_nacimientos_witness1_id")
                        .IsRequired();
                });

            modelBuilder.Entity("NotariaDB.Models.Notarios", b =>
                {
                    b.HasOne("NotariaDB.Models.Usuarios", "User")
                        .WithOne("Notarios")
                        .HasForeignKey("NotariaDB.Models.Notarios", "UserId")
                        .HasConstraintName("fk_notarios_user_id")
                        .IsRequired();
                });

            modelBuilder.Entity("NotariaDB.Models.Places", b =>
                {
                    b.HasOne("NotariaDB.Models.Cities", "City")
                        .WithMany("Places")
                        .HasForeignKey("CityId")
                        .HasConstraintName("fk_places_city_id")
                        .IsRequired();

                    b.HasOne("NotariaDB.Models.Departments", "Department")
                        .WithMany("Places")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_places_department_id")
                        .IsRequired();
                });

            modelBuilder.Entity("NotariaDB.Models.Usuarios", b =>
                {
                    b.HasOne("NotariaDB.Models.Doctypes", "Doctype")
                        .WithMany("Usuarios")
                        .HasForeignKey("DoctypeId")
                        .HasConstraintName("fk_usuarios_doctype_id")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
